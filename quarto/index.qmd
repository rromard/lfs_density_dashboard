---
title: "A Data Portrait of Unions Members in Canada"
author: "Ryan Romard"
editor: visual
format: 
  dashboard:
    scrolling: false
    theme: 
      - sandstone
      - lfs_dash_style.css
server: shiny
tbl-cap-location: top
cap-location: top
execute:
  echo: false
  warning: false
---

```{r}
#| context: setup
# Libraries, fonts themes
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, dev = "svg")
xfun::pkg_attach("tidyverse", "here", "scales", "qs", "zoo", "patchwork", "shiny", "rlang", "ggrepel", "ggtext", "ggfittext", "kableExtra", "glue", "legendry")

dashpal <-  c("#771155", "#117777")
rpal <- c("#771155", "#AA4488", "#CC99BB", 
          "#114477", "#4477AA", "#77AADD", 
          "#117777", "#44AAAA", "#77CCCC", 
          "#117744", "#44AA77", "#88CCAA", 
          "#777711", "#AAAA44", "#DDDD77", 
          "#774411", "#AA7744", "#DDAA77", 
          "#771122", "#AA4455", "#DD7788")
dens_pal <- list(c(`Union member` = dashpal[2], `Not member` = "#DADDEF"),
                      c(`Union member` = dashpal[1], `Not member` = "#DADDEF"))
bar_pal <- list(
  c(`yes` = dashpal[2], `no` = "#DADDEF"),  # private
  c(`yes` = dashpal[1], `no` = "#DADDEF")  # public
)

theme_rr_dash <-
  function(base_size = 14, legend = 'none') {
    theme_minimal() %+replace%
      theme(
        text = element_text(size = 6),
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 16),
        axis.title = element_text(size = 14),
        plot.title = element_text(
          size = 20,
          hjust = 0,
          face = 'bold',
          margin = margin(b = 6)
        ),
        plot.subtitle = element_text(
          size = 18,
          hjust = 0,
          margin = margin(b = 10)
        ),
        plot.title.position = 'plot',
        plot.caption = element_text(
          size = 12,
          face = 'italic',
          hjust = 1,
          margin = margin(t = 10)
        ),
        panel.grid.minor = element_blank(),
        legend.position = legend,
        strip.text = element_text(
          size = 18,
          face = "bold",
          color = "#353935",
          hjust = 0,
          margin = margin(b = 5, unit = "mm")
        )
      )
  }
```

```{r}
#| context: data
#| include: false
# Data import and prep
dens_df <- qread(here('_targets', 'objects', 'density_df'))
pop_df <- qread(here('_targets', 'objects', 'dist_df'))

# Dataframe full of default factor levels
factor_levels <- 
  tribble(~varlevel, ~variable,
          
  "15 to 24","Age group",
  "25 to 54","Age group",
  "55 to 64","Age group",
  "65+", "Age group",
  
  # CMA
  "Calgary","CMA",
  "Edmonton","CMA",
  "Hamilton","CMA",
  "Montréal","CMA",
  "Ottawa–Gatineau","CMA",
  "Québec","CMA",
  "Toronto","CMA",
  "Vancouver","CMA",
  "Winnipeg","CMA",
  "Other CMA/non-CMA", "CMA",
  
  # Province
  "Alberta","Province",
  "British Columbia","Province",
  "Manitoba","Province",
  "New Brunswick","Province",
  "Newfoundland","Province",
  "Nova Scotia","Province",
  "Ontario","Province",
  "PEI","Province",
  "Quebec","Province",
  "Saskatchewan","Province",
  
  # Education
  "Under secondary", "Education level",
  "Secondary/Some PSE", "Education level",
  "College","Education level",
  "Undergraduate","Education level",
  "Graduate","Education level",
  
  # Student status
  "Non-student", "Student status",
  "Part-time student", "Student status",
  "Full-time student", "Student status",

  # Family type
  "Dual-earner","Family type",
  "Single-earner","Family type",
  "Not in econ family","Family type",
  "Lone-parent","Family type",
  "Other families","Family type",

  # Gender
  "Women","Gender",
  "Men","Gender",
  
  # Immigration
  "Non-immigrant","Immigration",
  "Immigrant > 10 years","Immigration",
  "Immigrant < 10 years","Immigration",
  
  # Employment
  "Standard employment","Employment status",
  "Non-standard employment","Employment status",
  "Full-time","Employment status",
  "Part-time","Employment status",
  "Multiple jobholder","Employment status",
  "Single jobholder","Employment status",
  "Permanent","Employment status",
  "Temporary, casual","Employment status",
  "Temporary, seasonal","Employment status",
  "Temporary, term/contract","Employment status",
    
  # Job tenure
  "Under 1 year","Job tenure",
  "1 to under 5","Job tenure",
  "5 to under 10","Job tenure",
  "10 years or more","Job tenure",

  # Industry
  "Accomodation/Food","Industry",
  "Agriculture","Industry",
  "Business/Building/Other services","Industry",
  "Construction","Industry",
  "Education","Industry",
  "Finance/Insurance","Industry",
  "Fishing/Hunting/Trapping","Industry",
  "Forestry/Support activities","Industry",
  "Health care/Social assistance","Industry",
  "Information/Culture/Recreation","Industry",
  "Manufacturing, durable","Industry",
  "Manufacturing, non-durable","Industry",
  "Mining/Quarrying/Oil and gas","Industry",
  "Other services","Industry",
  "Professional/Scientific/Technical","Industry",
  "Public administration","Industry",
  "Real estate/Rental/Leasing","Industry",
  "Retail trade","Industry",
  "Transportation/Warehousing","Industry",
  "Utilities","Industry",
  "Wholesale trade","Industry",
  
  # Firm size
  "Less than 20 employees", "Firm size",
  "20 to 99 employees", "Firm size",    
  "100 to 500 employees", "Firm size",  
  "More than 500 employees", "Firm size",

  # Est size
  "Less than 20 employees", "Establishment size",
  "20 to 99 employees", "Establishment size",    
  "100 to 500 employees", "Establishment size",  
  "More than 500 employees", "Establishment size",

  # Occupation
  "Business/Finance/Admin","Occupation",
  "Health","Occupation",
  "Management","Occupation",
  "Natural/Applied sciences","Occupation",
  "Natural resources/Agriculture/Related","Occupation",
  "Art/Culture/Recreation/Sport","Occupation",
  "Education/Law/SCG services","Occupation",
  "Manufacturing/Utilities","Occupation",
  "Sales/Service","Occupation",
  "Trades/Transport/Equip operators","Occupation",
  
  # Youngest child
  "No children","Youngest child",
  "Under 6 years","Youngest child",
  "6-12 years","Youngest child",
  "13-17 years","Youngest child",
  "18-24 years","Youngest child"
)

# Pull main variables for selector list
dash_vars <- dens_df |> distinct(variable) |> pull() |> as.character()
dash_vars_order <- c(
  "Province",
  "CMA",
  "Age group",
  "Gender",
  "Family type",
  "Youngest child",
  "Education level",
  "Student status",
  "Immigration",
  "Occupation",
  "Industry",
  "Establishment size",
  "Firm size",
  "Employment status",
  "Job tenure"
)
dash_vars <- dash_vars[order(match(dash_vars, dash_vars_order))]
```

#  {.toolbar}

```{r}
selectInput("variable", label = "Select variable", choices = dash_vars)
selectInput("gg_layout", label = 'Layout', choices = c("Vertical", "Horizontal", "Stacked"))
selectInput("measure", label = "Measure", choices = c("Union density", "Distribution (%)", "Distribution (N)"))
```

# Home

Here is a home page with some information, attribution, instructions etc.

# Charts

## Content

```{r}
#| fill: false
#| flow: true
#| dev: "svg"
plotOutput('plot', height = "100%", width = "100%")
```

# Table

## Content

```{r}
#| fill: false
#| flow: false
htmlOutput('table_title')
tableOutput('table')
```

```{r}
#| context: server

##### DATA
# Default factor levels
flevels <- reactive({
  req(input$variable)
  factor_levels[factor_levels$variable == input$variable, ] |> 
    pull(varlevel) |> as.character()
})

# Create union density data set, reactive
dataset <- reactive({
  req(input$variable)
  df <- dens_df[dens_df$variable == input$variable, ] |> 
    mutate(varlevel = factor(varlevel, levels = flevels()))
})

# Create demographic dataset, reactive
dataset_pop <- reactive({
  req(input$variable)
  df <- pop_df[pop_df$variable == input$variable, ] |>
    mutate(varlevel = factor(varlevel, levels = flevels())) |>
    group_by(survyear, variable, var_orig, cowmain_rc) |>
    mutate(
      p_memb = n / sum(n),
      # Calculate the bar/area backdrop
      p_memb_bd = 1 - p_memb,
      cowmain_rc = as_factor(as.character(cowmain_rc))
      )
})

# Calculate population totals per variable level
pop_totals <- reactive({dataset_pop() |> 
  filter(survyear==2024) |> 
  group_by(survyear, var_orig, varlevel) |> 
  reframe(n = sum(n), p_memb = sum(p_memb)) |> 
  arrange(-n)
})

# Create character vector for default factor ordering
pop_levels <- reactive({pop_totals() |> 
  pull(varlevel) |> 
  as.character()
})

# Create reactive data set for Kable table
kbl_df <- reactive({
  if (input$measure == "Union density") {
    kb_prep(dataset())
  } else if (input$measure %in% c("Distribution (%)", "Distribution (N)")) {
    kb_prep(dataset_pop())
  }
})
```

```{r}
#| context: server
##### HELPER

# Programmatic chart and output height
n_facets <- function() {
  # All vertical and horizontal charts
  if (input$gg_layout %in% c("Vertical", "Horizontal")) {
    return (500 * (distinct(dataset(), varlevel) |> nrow() /  2))
    # Stacked charts for demographics
  } else if (input$gg_layout == "Stacked" &
             input$variable != "Employment status" &
             input$measure != "Union density") {
    return(650)
  } else if (input$gg_layout == "Stacked" &
           input$variable == "Employment status" &
           input$measure != "Union density") {
    return(1200)
  } else if (input$gg_layout == "Stacked" &
           input$measure == "Union density") {
    return (500 * (distinct(dataset(), varlevel) |> nrow() /  2))
  }
}

# Number of facets desired by variable
num_rows <- reactive(
  case_when(
    input$variable %in% c("Gender","Immigration","Age group","Student status") ~ 1,
    input$variable %in% c(
      "Education level",
      "Family type",
      "Youngest child",
      "Job tenure",
      "Firm size",
      "Establishment size"
    ) ~ 2,
    input$variable %in%
      c(
        "Province",
        "CMA",
        "Occupation",
        "Employment status"
      ) ~ 4,
    input$variable %in% c("Industry") ~ 7
  )
)

# Area margins desired by variable
area_margins <- reactive(
  case_when(
    input$variable %in% c("Gender") ~ 75,
    input$variable %in% c(
      "Job tenure",
      "Age group",
      "Family type",
      "Youngest child",
      "Student status"
    ) ~ 130,
    input$variable %in%
      c("Province", "CMA","Education level","Immigration","Employment status", "Firm size", "Establishment size") ~ 150,
    input$variable %in% c("Industry", "Occupation") ~ 270
  )
)

## Table helpers
# Kable table prep
kb_prep <- function(df) {
  
  variable <- df |> distinct(variable) |> pull(variable) |> as.character()
  
  if (input$measure == "Union density") {
    df <- df |>
      filter(union_bin == "Union member") |> 
      select(survyear, cowmain_rc, varlevel, value = p) |> 
      pivot_wider(
        id_cols = c(survyear, cowmain_rc),
        names_from = varlevel,
        values_fn = \(x) cell_spec(formattable::percent(x, digits = 1))
      ) 
    
  } else if (input$measure == "Distribution (%)") {
    df <- df |>
      select(survyear, cowmain_rc, varlevel, value = p_memb) |> 
      pivot_wider(
        id_cols = c(survyear, cowmain_rc),
        names_from = varlevel,
        values_fn = \(x) cell_spec(formattable::percent(x, digits = 1))
      ) 
  }
  
  else if (input$measure == "Distribution (N)") {
    df <- df |>
      select(survyear, cowmain_rc, varlevel, value = n) |> 
      pivot_wider(
        id_cols = c(survyear, cowmain_rc),
        names_from = varlevel,
        values_fn = \(x) cell_spec(formattable::comma(x/1000, digits = 0)) 
      ) 
  }
  
  if (input$variable %in% c("Industry", "Occupation")) {
    df |> 
      pivot_longer(3:last_col()) |> 
      pivot_wider(names_from = 1) |> 
      arrange(cowmain_rc)

  } else {
    df |> 
      arrange(cowmain_rc)
  }
}

# Kable table subtitles
kb_title <- reactive({
  if (input$measure == "Union density") {
    "<span style='font-size:18px'><b>Union density (% of group that are Union members)</b></span>"
  } else if (input$measure == "Distribution (%)") {
    "<span style='font-size:18px'><b>Distribution of Union member by group</b></span>"
  } else if (input$measure == "Distribution (N)") {
    "<span style='font-size:18px'><b>Number of union members in thousands</b></span>"
  }
})
```

```{r}
#| context: server
##### Base plot functions

# Union density (Vertical and Horizontal)
union_density_gg <- function(.data, pal) {
  
  # For ordering plots by average values of coverage
  if (input$gg_layout == "Horizontal") {
    horiz_levels <- filter(.data, union_bin == "Union member") |>
      group_by(varlevel) |>
      reframe(p = mean(p, na.rm = TRUE)) |>
      arrange(-p) |>
      pull(varlevel) |>
      as.character()

    .data <- mutate(.data, varlevel = factor(varlevel, levels = horiz_levels))
  }

  gg <- ggplot(
    .data,
    aes(
      x = .data$survyear,
      y = .data$p,
      fill = .data$union_bin,
      color = .data$union_bin
    )
  ) +
    geom_area(alpha = 0.55) +
    geom_point(data = filter(.data, union_bin == "Union member"),
               size = 2.25) +
    geom_hline(yintercept = 0, color = "#d8d8d8") +
    coord_cartesian(clip = "off") +
    scale_y_continuous(labels = label_percent(),
                       #limits = c(0, 1),
                       expand = c(0, 0)) +
    scale_fill_manual(values = pal, na.value = "#DADDEF") +
    scale_color_manual(values = pal, na.value = "#DADDEF") +
    theme_rr_dash() +
    theme(
      panel.grid = element_blank(),
      axis.text.y.left = element_blank(),
      panel.spacing.y = unit(15, "pt")
    ) +
    labs(x = NULL, y = NULL)
  
  # Vertical layout
  if (input$gg_layout == "Vertical") {
    gg +
      geom_text(
        data = filter(
          .data,
          union_bin == "Union member",
          survyear %in% seq(2006, 2024, by = 3)
        ),
        aes(label = percent(.data$p, accuracy = .1)),
        vjust = 0,
        hjust = 0.5,
        nudge_y = .04,
        fontface = "bold",
        size = 6
      ) +
      scale_x_continuous(
        expand = c(0.05, 0.05),
        breaks = seq(2006, 2024, by = 3),
        guide = guide_axis(check.overlap = TRUE)
      ) +
      facet_wrap(vars(varlevel),
                 ncol = 1,
                 dir = "v",
                 axes = "all_x")
    
    # Horizontal layout
  } else if (input$gg_layout == "Horizontal") {
    
    gg +
    geom_text_repel(
      data = filter(
        .data,
        union_bin == "Union member",
        survyear %in% seq(2006, 2024, by = 6)
      ),
      aes(label = percent(.data$p, accuracy = .1)),
      vjust = 0,
      #hjust = 0.42,
      hjust = 0.5,
      nudge_y = .04,
      #check_overlap = TRUE,
      fontface = "bold",
      size = 6,
      point.size = NA,
      min.segment.length = Inf,
      force = .25
    ) +
    theme(
      panel.spacing.x = unit(10, "pt"),
     # axis.text.x = element_markdown(hjust = c(0, 1)),
      strip.clip = "on"
    ) +
    scale_x_continuous(
      expand = c(0.05, 0.05),
      breaks = seq(2006, 2024, by = 6),
      guide = guide_axis(check.overlap = TRUE)
    ) +
    facet_wrap(
      vars(varlevel),
      nrow = num_rows(),
      dir = "h",
      axes = "all_x",
      drop = TRUE,
      labeller = label_wrap_gen(width = 30)
    )
  }
}

# Union density (Stacked, total workforce)
union_density_stacked_gg <- function(.data) {
  
  dens_pal_flat <- c(
    `Private (Unionized)` = dashpal[2],
    `Private (No union)` = colorspace::lighten(dashpal[2], .5),
    `Public (Unionized)` = dashpal[1],
    `Public (No union)` = colorspace::lighten(dashpal[1], .5)
  )
  
  .data <- mutate(.data, unioncow = fct_rev(unioncow))
  
  gg <- .data |>
    ggplot(
      aes(
        x = .data$survyear,
        y = .data$p_pop,
        fill = .data$unioncow,
      )
    ) +
    geom_area(
      aes(color = .data$unioncow),
      show.legend = c(fill = TRUE, color = NA)
    ) +
    geom_label(
      data = filter(.data, 
                    survyear %in% seq(2006,2024, by = 3),
                    p_pop >= .03),
      aes(
        label = percent(.data$p_pop, accuracy = .1),
        group = unioncow
      ),
      vjust = 0.5,
      hjust = 0.5,
      fontface = "bold",
      size = 6,
      position = "stack",
      color = "#fff",
      label.padding = unit(.01, "lines"),
      show.legend = FALSE
    ) +
    geom_hline(yintercept = 0, color = "#d8d8d8") +
    coord_cartesian(clip = "off") +
    scale_x_continuous(breaks = seq(2006, 2024, by = 3),
                       guide = guide_axis(check.overlap = TRUE)) +
    scale_y_continuous(labels = label_percent(), #limits = c(0, 1),
                       expand = c(0, 0)) +
    
    scale_fill_manual(values = dens_pal_flat, na.value = "#DADDEF") +
    scale_color_manual(values = dens_pal_flat, na.value = "#DADDEF", guide = "none") +
    theme_rr_dash() +
    guides(fill = guide_legend(reverse = TRUE, title = NULL)
           ) +
    theme(
      legend.position = "top",
      legend.text = element_text(size = 18, face = 'bold'),
      legend.key.size = unit(22, 'pt'),
      panel.grid = element_blank(),
      axis.text.y.left = element_blank(),
      panel.spacing.y = unit(15, "pt")
    ) +
    labs(x = NULL, y = NULL, 
         subtitle = 
           glue("Union member share of workforce (paid employees) by {input$variable}")) +
    facet_wrap(vars(varlevel), ncol = 2, dir = "v", axes = "all_x")
}

# Demographics, bar charts
union_bars_gg <- function(.data, pal) {
  .data <- filter(.data, survyear %in% seq(2006, 2024, by = 3))
  
  # For ordering plots by average values horizontally - Proportions
  if (input$gg_layout == "Horizontal" &
      input$measure == "Distribution (%)") {
    horiz_levels <- group_by(.data, varlevel) |>
      reframe(p_memb = mean(p_memb)) |>
      arrange(-p_memb) |>
      pull(varlevel)
    
    .data <- mutate(.data, varlevel = factor(varlevel, levels = horiz_levels))
    
    # For ordering plots by average values horizontally - Counts
  } else if (input$gg_layout == "Horizontal" &
             input$measure == "Distribution (N)") {
    horiz_levels <- group_by(.data, varlevel) |>
      reframe(n = sum(n)) |>
      arrange(-n) |>
      pull(varlevel)
    
    .data <- mutate(.data, varlevel = factor(varlevel, levels = horiz_levels))
  }
  
  ##### FOR PROPORTIONS
  if (input$measure == "Distribution (%)") {
    .data <- select(.data,
                    survyear,
                    variable,
                    varlevel,
                    cowmain_rc,
                    p_memb,
                    p_memb_bd) |>
      pivot_longer(
        cols = p_memb:p_memb_bd,
        names_to = "fillvar",
        values_to = "p_memb"
      ) |>
      mutate(
        fillvar = ifelse(fillvar == "p_memb", "yes", "no"),
        fillvar = factor(fillvar, levels = c("no", "yes")))
    
    gg <- ggplot(
      .data,
      aes(
        x = .data$survyear,
        y = .data$p_memb,
        fill = .data$fillvar
      )
    ) +
      geom_col(position = "fill") +
      geom_hline(yintercept = 0, color = "#d8d8d8") +
      geom_bar_text(
        data = filter(.data, fillvar == "yes"),
        formatter = percent_format(accuracy = .1),
        fontface = "bold",
        outside = TRUE,
        contrast = TRUE,
        size = 15,
        min.size = 10
      ) +
      scale_y_continuous(labels = percent_format(accuracy = 1L), limits = c(0,1)) +
      scale_fill_manual(values = pal, na.value = "#DADDEF") +
      theme_rr_dash() +
      theme(panel.grid = element_blank()) +
      labs(x = NULL, y = NULL)
    
    ##### FOR COUNTS
  } else if (input$measure == "Distribution (N)") {
    gg <- ggplot(.data,
                 aes(
                   x = .data$survyear,
                   y = .data$n,
                   fill = .data$cowmain_rc,
                 )) +
      geom_col() +
      geom_hline(yintercept = 0, color = "#d8d8d8", linewidth = 1.45) +
      geom_bar_text(
        formatter = number_format(accuracy = .1, scale_cut = cut_short_scale()),
        fontface = "bold",
        outside = TRUE,
        contrast = TRUE,
        size = 14,
        min.size = 10
      ) +
      scale_y_continuous(expand = expansion(mult = c(0,.1))) +
      scale_fill_manual(values = c(`Public sector` = dashpal[1], `Private sector` = dashpal[2])) +
      theme_rr_dash() +
      theme(panel.grid = element_blank(), axis.text.y = element_blank(),
            panel.background = element_rect(fill = '#fafafa', colour = '#d9d9d9')) +
      labs(x = NULL, y = NULL)
  }
  
  ##### VERTICAL LAYOUT
  if (input$gg_layout == "Vertical") {
    gg +
      scale_x_continuous(
        expand = c(0.05, 0.05),
        breaks = seq(2006, 2024, by = 3),
        guide = guide_axis(check.overlap = TRUE)
      ) +
      theme(axis.text.y = element_blank(),
            panel.spacing.y = unit(15, "pt")) +
      facet_wrap(vars(varlevel),
                 ncol = 1,
                 dir = "v",
                 drop = FALSE,
                 axes = "all_x") 
    
    ##### HORIZONTAL LAYOUT
  } else if (input$gg_layout == "Horizontal") {
    gg + scale_x_continuous(
      expand = c(0.05, 0.05),
      breaks = seq(2006, 2024, by = 3),
      guide = guide_axis(check.overlap = TRUE)
    ) +
      facet_wrap(
        vars(fct_reorder(varlevel, p_memb, na.rm = TRUE)),
        nrow = num_rows(),
        dir = "h",
        axes = "all_x",
        drop = TRUE,
        labeller = label_wrap_gen(width = 30)
      ) +
      theme(panel.spacing.x = unit(10, "pt"),
            panel.spacing.y = unit(15, "pt"),
            strip.clip = "on")
  }
}

## Patchwork functions
# Create two charts per sector, patchwork into one chart
union_density_patch <- function(df, pal) {
  
  if (input$gg_layout %in% c("Vertical", "Horizontal")) {
    ggs <- group_by(df, cowmain_rc) |>
      group_split() |>
      map2(pal, \(x, y) union_density_gg(x, y))
    
    ggs[[1]] <- ggs[[1]] +
      ggtitle("PRIVATE SECTOR", subtitle = "Share of paid employees that are union members") +
      theme(plot.title = element_text(color = dashpal[2]))
    
    ggs[[2]] <- ggs[[2]] +
      ggtitle("PUBLIC SECTOR", subtitle = "Share of paid employees that are union members") +
      theme(plot.title = element_text(color = dashpal[1]))
    
    if (input$gg_layout == "Vertical") {
      ggs[[1]] + ggs[[2]]
    } else if (input$gg_layout == "Horizontal") {
      ggs[[1]] / ggs[[2]]
    }
  } else if (input$gg_layout == "Stacked") {
    union_density_stacked_gg(df)
  }
}

# Bar chart patchwork by sector function
union_bars_patch <- function(df, pal) {
  
  facet_blank <- function(str) {str_replace_all(str, ".", "")}
  
  subtitle <- case_when(
    input$measure == "Distribution (%)" ~ glue("Share of total union members by {input$variable}"),
    input$measure == "Distribution (N)" ~ glue("Number of union members by {input$variable}")
  )
  
  ggs <- group_by(df, cowmain_rc) |> 
    group_split() |> 
    map2(pal, \(x,y) union_bars_gg(x, y))
  
  ggs[[1]] <- ggs[[1]] + 
    ggtitle("PRIVATE SECTOR", subtitle = subtitle) +
    theme(plot.title = element_text(color = dashpal[2]))
  
  ggs[[2]] <- ggs[[2]] + 
    ggtitle("PUBLIC SECTOR", subtitle = subtitle) +
    theme(plot.title = element_text(color = dashpal[1]))
  
  if(input$gg_layout == "Vertical") {
    ggs[[1]] + ggs[[2]]
    
  } else if (input$gg_layout == "Horizontal") {
    ggs[[1]] / ggs[[2]]
    
  }
}

# Stacked area chart for stacked format
union_area_gg <- function(.data) {
  
   .data <- mutate(.data, varlevel = fct_reorder(varlevel, p_memb, na.rm = TRUE))
  
  if (input$gg_layout == "Stacked" & input$measure == "Distribution (%)") {
  gg <- ggplot(.data, aes(.data$survyear, .data$p_memb, fill = .data$varlevel))
  
  } else if (input$gg_layout == "Stacked" & input$measure == "Distribution (N)") {
  gg <- ggplot(.data, aes(.data$survyear, .data$n, fill = .data$varlevel))
  
  }
  
  gg <- gg +
    geom_area(
              color = "#fff") +
    geom_label_repel(
      data = filter(.data, survyear == 2024, p_memb >= .01),
      aes(
        label = .data$varlevel,
        color = after_scale(prismatic::best_contrast(fill, c("white", "black")))
      ),
      position = ggpp::position_stacknudge(x = .5, vjust = 0.35),
      size = 5,
      fontface = "bold",
      force = 0.05,
      force_pull = 0.05,
      point.padding = .02,
      label.padding = .2,
      hjust = 0,
      seed = 2024,
      direction = "y",
      xlim = c(2024, 2150),
      min.segment.length = 0.35
    ) +
    geom_hline(yintercept = 0) +
    coord_cartesian(clip = "off") +
    scale_x_continuous(breaks = seq(2006, 2024, by = 6), expand = c(0,0)) +
    scale_fill_manual(values = rpal) +
    theme_rr_dash() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.spacing.x = unit(area_margins(), "pt"),
      plot.margin = margin(r = unit(area_margins(), "pt"))
    ) +
    facet_wrap(vars(cowmain_rc)) +
    labs(x = NULL, y = NULL)
  
  if (input$measure == "Distribution (%)") {
    gg<- gg + labs(subtitle = glue("Distribution of union members by {input$variable}")) +
          scale_y_continuous(
           # limits = c(0,1),
            labels = label_percent(accuracy = 1L), expand = c(0, 0))
    
  } else if (input$measure == "Distribution (N)") {
    gg <- gg + labs(subtitle = glue("Number of union members by {input$variable}")) +
      scale_y_continuous(
        labels = label_number(accuracy = .1, scale_cut = cut_short_scale()), expand = c(0, 0))
  }
  
  if (input$variable == "Employment status") {
    gg + facet_wrap(vars(var_orig, cowmain_rc), ncol = 2)
  } else
  gg
}

# Table function
union_kbl <- function(df) {

kb_rows <- df |> 
  rownames_to_column() |> 
  group_by(cowmain_rc) |> 
  summarise(rowfirst = first(rowname), rowlast = last(rowname))

kb_align <- c("l", rep("r", ncol(df)-1))

df |> 
  ungroup() |> 
  select(-cowmain_rc) |> 
  rename(Year = 1) |> 
  kbl(format = "html", escape = FALSE, align = kb_align) |> 
  kable_styling(
    bootstrap_options = c("striped", "hover", "responsive"),
    font_size = 16,
    fixed_thead = T) |> 
  pack_rows("Private sector",
            kb_rows[kb_rows$cowmain_rc=="Private sector",]$rowfirst,
            kb_rows[kb_rows$cowmain_rc=="Private sector",]$rowlast,
            label_row_css = "border-bottom: 1px solid;background-color:#117777;color:#fff") |> 
  pack_rows("Public sector",
            kb_rows[kb_rows$cowmain_rc=="Public sector",]$rowfirst,
            kb_rows[kb_rows$cowmain_rc=="Public sector",]$rowlast,
            label_row_css = "border-bottom: 1px solid;background-color:#771155;color:#fff") |> 
  scroll_box(width = "100%", height = "700px", fixed_thead = T)

}
```

```{r}
#| context: server
##### OUTPUT
# Render charts
output$plot <- renderPlot({
  # Density charts
  if (input$measure == "Union density"  &
      input$gg_layout %in% c("Horizontal", "Vertical")) {
    p <- union_density_patch(dataset(), dens_pal)
  } else if (input$measure == "Union density"  &
             input$gg_layout == "Stacked") {
    p <- union_density_stacked_gg(dataset())
  } else if (input$measure %in% c("Distribution (%)", "Distribution (N)") &
             input$gg_layout %in% c("Horizontal", "Vertical")) {
    p <- union_bars_patch(dataset_pop(), bar_pal)
  } else if (input$measure %in% c("Distribution (%)", "Distribution (N)") &
             input$gg_layout == "Stacked") {
    p <- union_area_gg(dataset_pop())
  }
  return(p)
}
, height = n_facets)

# Create table title output
output$table_title <- renderText({kb_title()})

# Create table output
output$table <- reactive({union_kbl(kbl_df())})

##### Data
output$data <- renderTable({
  dataset()
})
```
